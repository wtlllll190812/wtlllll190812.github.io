[{"content":"概述 Entities包是 Unity DOTS（数据驱动技术栈）的一部分，提供了数据驱动的ECS架构实现 以下是unity提供的学习资料 DOTS Guide and Samples\n安装 要安装最新版本的 Entities 包，你的Unity版本需要在2022.3及以上版本 打开包管理窗口，这里可以使用两种方式安装：\n使用名称安装（com.unity.entities） 使用git链接 ECS 工作流 使用面对数据的ECS工作流开发游戏的方式与之前面向对象的开发方式十分不同，无论是开发原则，还是功能的实现方式上。所以在真正开始ECS开发之前，有必要理解一下ECS工作流。\n创建子场景（subscene） ECS使用subscene来容纳游戏的内容，你可以将GameObject和MonoBehaviour组件添加到子场景，然后烘焙器（baker）会将你的 GameObject 对象的 Monobehaviour 对象转换为实体和 ECS 组件。\n创建ECS组件（component） 组件存储了引用的数据，而系统则通过按照逻辑读写ECS组件数据来执行游戏行为。ECS工作流是面向数据的，所以最好是在开始创建实体以及系统的逻辑之前就开始规划你的数据，并为之创造ECS组件。Entiites提供了多种组件类型来满足不同目标，这些会在下文中提到。\n创建实体（entity） 实体代表了游戏中存在的不同事物，要在编辑器中创建实体，你添加一个GameObject到子场景，它会被烘焙程序转换成实体。\n或者，你也可以创建baker将ECS组件附加到实体上，当你创建baker时，你需要为其指定一个MonoBehaviour组件，然后根据MonoBehaviour组件的数据创建ECS组件并附加到Entities上。\n这个工作流被称为“authoring”组件\n注意，当脚本用作authoring时，建议在类名的后方加上“Authoring”\n当然，你也可以在运行时创建实体，这在后文中会讲到\n创建系统（system） 为此系统可以查询以及转换ECS组件数据，创建和销毁实体，或者添加以及移除附加在实体上的组件，它定义了游戏的行为 默认情况下，当你创建系统时，Unity会将其初始化并添加到默认的World中。 对于不同的目标，unity提供了不同种类的系统，在下文中会提到。\n优化系统 默认情况下，你在system中编写的代码会同步运行在主线程中，如果系统涉及到大量实体的数据同时可以在多线程下受益，那么最好创建Burst兼容的job，然后在并行执行job，Burst会将你的c#代码编译成高性能的原生Cpu代码，而job使你可以将任务分发到多线程，从多处理器中受益。\n如果一个system并不执行太多工作，比如仅仅处理少量实体的数据，那么并行任务带来的开销将会超过从多线程中获得的收益，要确认你的job是不是这种情况，可以使用cpu profiler来测试多线程以及单线程下unity花了多长时间在你的job上。 如果并行的开销让unity花费了更长的时间，尝试以下选项来优化job:\n在主线程上运行job 如果系统是非托管的 ISystem 请使用SystemApi.Query和普通的foreach。你可以在使用了查询的方法上使用BurstCompile属性来让burst优化性能 ","date":"2025-03-06T20:42:31+08:00","image":"https://wtlllll190812.github.io/img/DOTS.png","permalink":"https://wtlllll190812.github.io/p/unity-dots-entities%E5%8C%85%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91%E5%8F%8A%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80%E6%A6%82%E8%BF%B0/","title":"Unity DOTS Entities包文档翻译及学习笔记（一）概述"}]